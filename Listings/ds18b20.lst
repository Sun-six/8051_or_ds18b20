C51 COMPILER V9.60.0.0   DS18B20                                                           02/07/2020 18:32:13 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN .\Objects\ds18b20.obj
COMPILER INVOKED BY: E:\develop\KEIL5.28\C51\BIN\C51.EXE Module\ds18b20.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Module) DEBU
                    -G OBJECTEXTEND PRINT(.\Listings\ds18b20.lst) OBJECT(.\Objects\ds18b20.obj)

line level    source

   1          #include "ds18b20.h"
   2          
   3          #define DS18B20_PIN     P1_0
   4          #define DS18B20_1US             _nop_()
   5          #define DS18B20_2US             DS18B20_1US;DS18B20_1US
   6          #define DS18B20_3US             DS18B20_1US;DS18B20_2US
   7          #define DS18B20_4US             DS18B20_1US;DS18B20_3US
   8          #define DS18B20_5US             DS18B20_1US;DS18B20_4US
   9          #define DS18B20_6US             DS18B20_1US;DS18B20_5US
  10          #define DS18B20_7US             DS18B20_1US;DS18B20_6US
  11          #define DS18B20_8US             DS18B20_1US;DS18B20_7US
  12          #define DS18B20_9US             DS18B20_1US;DS18B20_8US
  13          #define DS18B20_10US    DS18B20_1US;DS18B20_9US
  14          #define DS18B20_50US    DS18B20_10US;DS18B20_10US;DS18B20_10US;DS18B20_10US;DS18B20_10US
  15          #define DS18B20_100US   DS18B20_50US;DS18B20_50US
  16          #define DS18B20_500US   DS18B20_100US;DS18B20_100US;DS18B20_100US;DS18B20_100US;DS18B20_100US
  17          #define DS18B20_1000US  DS18B20_500US;DS18B20_500US
  18          //读取一个字节
  19          unsigned char ds18b20_read_byte(void)
  20          {
  21   1          unsigned char i, t_data = 0;
  22   1      
  23   1          for(i = 0; i < 8; i++)
  24   1          {
  25   2              DS18B20_PIN = 0; //产生读时间间隙(读开始)
  26   2              DS18B20_2US;
  27   2              DS18B20_PIN = 1; //释放总线
  28   2              DS18B20_8US;    //等待DS18B20的数据输出
  29   2              t_data >>= 1;    //高位补0，默认以0为准
  30   2      
  31   2              if(DS18B20_PIN) t_data |= 0x80;
  32   2      
  33   2              DS18B20_50US;
  34   2              DS18B20_10US;
  35   2              DS18B20_PIN = 1; //释放总线,等待读取下一位数据
  36   2          }
  37   1      
  38   1          return t_data;
  39   1      }
  40          //写入一个字节
  41          void ds18b20_write_byte(unsigned char cmd)
  42          {
  43   1          unsigned char i;
  44   1      
  45   1          for(i = 0; i < 8; i++)
  46   1          {
  47   2              DS18B20_PIN = 0;
  48   2              DS18B20_1US;
  49   2              DS18B20_PIN = cmd & 0x01; //发送实际的数据位
  50   2              DS18B20_50US;
  51   2              DS18B20_10US; //等待写完成
  52   2              DS18B20_PIN = 1; //释放总线，准备下一次发送
  53   2              cmd >>= 1;
  54   2          }
C51 COMPILER V9.60.0.0   DS18B20                                                           02/07/2020 18:32:13 PAGE 2   

  55   1      }
  56          //模块初始化 1:模块存在 0：模块不存在
  57          unsigned char ds18b20_init(void)
  58          {
  59   1          DS18B20_PIN = 1;
  60   1          DS18B20_10US;
  61   1      
  62   1          if(ds18b20_read_status())
  63   1          {
  64   2              return 0;
  65   2          }
  66   1      
  67   1          return 1;
  68   1      }
  69          //获取状态 1:no 0:ok
  70          unsigned char ds18b20_read_status(void)
  71          {
  72   1          unsigned char cnt = 0;
  73   1          DS18B20_PIN = 0;
  74   1          DS18B20_100US;
  75   1          DS18B20_100US;
  76   1          DS18B20_100US;
  77   1          DS18B20_100US;
  78   1          DS18B20_100US;
  79   1          DS18B20_100US;
  80   1          DS18B20_100US;
  81   1          DS18B20_50US;
  82   1          DS18B20_PIN = 1;
  83   1          DS18B20_10US;
  84   1          DS18B20_5US;      //等待DS18B20回应
  85   1      
  86   1          while(DS18B20_PIN && cnt < 200)
  87   1          {
  88   2              cnt++;
  89   2          }
  90   1      
  91   1          if(cnt >= 200) return 1;
  92   1      
  93   1          cnt = 0;
  94   1      
  95   1          while(!DS18B20_PIN && cnt < 240)
  96   1          {
  97   2              cnt++;
  98   2          }
  99   1      
 100   1          if(cnt >= 240) return 1;
 101   1      
 102   1          return 0;
 103   1      }
 104          //开始转换 0：开启失败  1：开启成功
 105          unsigned char ds18b20_conversion_start(void)
 106          {
 107   1          if(ds18b20_read_status())
 108   1          {
 109   2              return 0;
 110   2          }
 111   1      
 112   1          ds18b20_write_byte(0xCC); //跳过ROM序列检测
 113   1          ds18b20_write_byte(0x44); //启动一次温度转换
 114   1          return 1;
 115   1      }
 116          
C51 COMPILER V9.60.0.0   DS18B20                                                           02/07/2020 18:32:13 PAGE 3   

 117          //读取温度
 118          unsigned short ds18b20_read_temperature(void)
 119          {
 120   1          unsigned char temp_H, temp_L, ret;
 121   1      
 122   1          ret = ds18b20_init();
 123   1      
 124   1          ds18b20_write_byte(0xCC); //跳过ROM序列检测
 125   1          ds18b20_write_byte(0x44); //启动一次温度转换
 126   1      
 127   1          if(ds18b20_read_status())
 128   1          {
 129   2              return 0;
 130   2          }
 131   1      
 132   1          ds18b20_write_byte(0xCC); //跳过ROM序列检测
 133   1          ds18b20_write_byte(0xBE); //读取温度
 134   1          temp_L = ds18b20_read_byte(); //读取的温度低位数据
 135   1          temp_H = ds18b20_read_byte(); //读取的温度高位数据
 136   1          return temp_L | (temp_H << 8); //合成温度
 137   1      }
 138          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1113    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
