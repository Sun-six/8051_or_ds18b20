; .\Objects\ds18b20.SRC generated from: Module\ds18b20.c
; COMPILER INVOKED BY:
;        E:\develop\KEIL5.28\C51\BIN\C51.EXE Module\ds18b20.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Module) DEBUG OBJECTEXTEND PRINT(.\Listings\ds18b20.lst) SRC(.\Objects\ds18b20.SRC)

$NOMOD51

NAME	DS18B20

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
AC	BIT	0D0H.6
T0	BIT	0B0H.4
T1	BIT	0B0H.5
EA	BIT	0A8H.7
T2	BIT	090H.0
IE	DATA	0A8H
P0_0	BIT	080H.0
P1_0	BIT	090H.0
P0_1	BIT	080H.1
P2_0	BIT	0A0H.0
P1_1	BIT	090H.1
P0_2	BIT	080H.2
P3_0	BIT	0B0H.0
P2_1	BIT	0A0H.1
P1_2	BIT	090H.2
P0_3	BIT	080H.3
P3_1	BIT	0B0H.1
P2_2	BIT	0A0H.2
P1_3	BIT	090H.3
P0_4	BIT	080H.4
P3_2	BIT	0B0H.2
P2_3	BIT	0A0H.3
P1_4	BIT	090H.4
P0_5	BIT	080H.5
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
P3_3	BIT	0B0H.3
P2_4	BIT	0A0H.4
P1_5	BIT	090H.5
P0_6	BIT	080H.6
P3_4	BIT	0B0H.4
P2_5	BIT	0A0H.5
P1_6	BIT	090H.6
P0_7	BIT	080H.7
P3_5	BIT	0B0H.5
ES	BIT	0A8H.4
P2_6	BIT	0A0H.6
P1_7	BIT	090H.7
P3_6	BIT	0B0H.6
P2_7	BIT	0A0H.7
IP	DATA	0B8H
P3_7	BIT	0B0H.7
RI	BIT	098H.0
CY	BIT	0D0H.7
INT0	BIT	0B0H.2
INT1	BIT	0B0H.3
TI	BIT	098H.1
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2MOD	DATA	0C9H
T2CON	DATA	0C8H
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
F1	BIT	0D0H.1
PSW	DATA	0D0H
?PR?ds18b20_read_byte?DS18B20            SEGMENT CODE 
?PR?_ds18b20_write_byte?DS18B20          SEGMENT CODE 
?PR?ds18b20_init?DS18B20                 SEGMENT CODE 
?PR?ds18b20_read_status?DS18B20          SEGMENT CODE 
?DT?ds18b20_read_status?DS18B20          SEGMENT DATA OVERLAYABLE 
?PR?ds18b20_conversion_start?DS18B20     SEGMENT CODE 
?PR?ds18b20_read_temperature?DS18B20     SEGMENT CODE 
?DT?ds18b20_read_temperature?DS18B20     SEGMENT DATA OVERLAYABLE 
	EXTRN	CODE (_delay_us)
	PUBLIC	ds18b20_read_temperature
	PUBLIC	ds18b20_conversion_start
	PUBLIC	ds18b20_read_status
	PUBLIC	ds18b20_init
	PUBLIC	_ds18b20_write_byte
	PUBLIC	ds18b20_read_byte

	RSEG  ?DT?ds18b20_read_status?DS18B20
?ds18b20_read_status?BYTE:
        cnt?344:   DS   1
	ORG  1
      count?345:   DS   1

	RSEG  ?DT?ds18b20_read_temperature?DS18B20
?ds18b20_read_temperature?BYTE:
        ret?548:   DS   1
; #include "ds18b20.h"
; 
; #define DS18B20_PIN	P1_0
; #define DS18B20_1US		_nop_()
; #define DS18B20_2US		DS18B20_1US;DS18B20_1US
; #define DS18B20_3US		DS18B20_1US;DS18B20_2US
; #define DS18B20_4US		DS18B20_1US;DS18B20_3US
; #define DS18B20_5US		DS18B20_1US;DS18B20_4US
; #define DS18B20_6US		DS18B20_1US;DS18B20_5US
; #define DS18B20_7US		DS18B20_1US;DS18B20_6US
; #define DS18B20_8US		DS18B20_1US;DS18B20_7US
; #define DS18B20_9US		DS18B20_1US;DS18B20_8US
; #define DS18B20_10US	DS18B20_1US;DS18B20_9US
; #define DS18B20_50US	DS18B20_10US;DS18B20_10US;DS18B20_10US;DS18B20_10US;DS18B20_10US
; #define DS18B20_100US	DS18B20_50US;DS18B20_50US
; #define DS18B20_500US	DS18B20_100US;DS18B20_100US;DS18B20_100US;DS18B20_100US;DS18B20_100US
; #define DS18B20_1000US	DS18B20_500US;DS18B20_500US
; //读取一个字节
; unsigned char ds18b20_read_byte(void)

	RSEG  ?PR?ds18b20_read_byte?DS18B20
ds18b20_read_byte:
	USING	0
			; SOURCE LINE # 19
; {
			; SOURCE LINE # 20
;     unsigned char i, t_data = 0;
			; SOURCE LINE # 21
;---- Variable 't_data?041' assigned to Register 'R7' ----
	CLR  	A
	MOV  	R7,A
; 
;     for(i = 0; i < 8; i++)
			; SOURCE LINE # 23
;---- Variable 'i?040' assigned to Register 'R6' ----
	MOV  	R6,A
?C0001:
	MOV  	A,R6
	CLR  	C
	SUBB 	A,#08H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0002
;     {
			; SOURCE LINE # 24
;         DS18B20_PIN = 0; //产生读时间间隙(读开始)
			; SOURCE LINE # 25
	CLR  	P1_0
;         DS18B20_2US;
			; SOURCE LINE # 26
	NOP  	
	NOP  	
;         DS18B20_PIN = 1; //释放总线
			; SOURCE LINE # 27
	SETB 	P1_0
;         DS18B20_8US;    //等待DS18B20的数据输出
			; SOURCE LINE # 28
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
;         t_data >>= 1;    //高位补0，默认以0为准
			; SOURCE LINE # 29
	MOV  	A,R7
	CLR  	C
	RRC  	A
	MOV  	R7,A
; 
;         if(DS18B20_PIN) t_data |= 0x80;
			; SOURCE LINE # 31
	JNB  	P1_0,?C0004
	ORL  	AR7,#080H
?C0004:
; 
;         DS18B20_50US;
			; SOURCE LINE # 33
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
;         DS18B20_10US;
			; SOURCE LINE # 34
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
;         DS18B20_PIN = 1; //释放总线,等待读取下一位数据
			; SOURCE LINE # 35
	SETB 	P1_0
;     }
			; SOURCE LINE # 36
	INC  	R6
	SJMP 	?C0001
?C0002:
; 
;     return t_data;
			; SOURCE LINE # 38
; }
			; SOURCE LINE # 39
	RET  	
; END OF ds18b20_read_byte

; //写入一个字节
; void ds18b20_write_byte(unsigned char cmd)

	RSEG  ?PR?_ds18b20_write_byte?DS18B20
L?0023:
	USING	0
	MOV  	R7,#0CCH
	LCALL	_ds18b20_write_byte
	MOV  	R7,#044H
_ds18b20_write_byte:
	USING	0
			; SOURCE LINE # 41
;---- Variable 'cmd?142' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 42
;     unsigned char i;
; 
;     for(i = 0; i < 8; i++)
			; SOURCE LINE # 45
;---- Variable 'i?143' assigned to Register 'R6' ----
	CLR  	A
	MOV  	R6,A
?C0006:
	MOV  	A,R6
	CLR  	C
	SUBB 	A,#08H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0009
;     {
			; SOURCE LINE # 46
;         DS18B20_PIN = 0;
			; SOURCE LINE # 47
	CLR  	P1_0
;         DS18B20_1US;
			; SOURCE LINE # 48
	NOP  	
;         DS18B20_PIN = cmd & 0x01; //发送实际的数据位
			; SOURCE LINE # 49
	MOV  	A,R7
	RRC  	A
	MOV  	P1_0,C
;         DS18B20_50US;
			; SOURCE LINE # 50
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
;         DS18B20_10US; //等待写完成
			; SOURCE LINE # 51
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
;         DS18B20_PIN = 1; //释放总线，准备下一次发送
			; SOURCE LINE # 52
	SETB 	P1_0
;         cmd >>= 1;
			; SOURCE LINE # 53
	MOV  	A,R7
	CLR  	C
	RRC  	A
	MOV  	R7,A
;     }
			; SOURCE LINE # 54
	INC  	R6
	SJMP 	?C0006
; }
			; SOURCE LINE # 55
?C0009:
	RET  	
; END OF _ds18b20_write_byte

; //模块初始化 1:模块存在 0：模块不存在
; unsigned char ds18b20_init(void)

	RSEG  ?PR?ds18b20_init?DS18B20
ds18b20_init:
	USING	0
			; SOURCE LINE # 57
; {
			; SOURCE LINE # 58
;     DS18B20_PIN = 1;
			; SOURCE LINE # 59
	SETB 	P1_0
;     DS18B20_10US;
			; SOURCE LINE # 60
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
; 
;     if(ds18b20_read_status())
			; SOURCE LINE # 62
	LCALL	ds18b20_read_status
	MOV  	A,R7
	JZ   	?C0010
;     {
			; SOURCE LINE # 63
;         return 0;
			; SOURCE LINE # 64
	MOV  	R7,#00H
	RET  	
;     }
			; SOURCE LINE # 65
?C0010:
; 
;     return 1;
			; SOURCE LINE # 67
	MOV  	R7,#01H
; }
			; SOURCE LINE # 68
?C0011:
	RET  	
; END OF ds18b20_init

; //获取状态 1:no 0:ok
; unsigned char ds18b20_read_status(void)

	RSEG  ?PR?ds18b20_read_status?DS18B20
ds18b20_read_status:
	USING	0
			; SOURCE LINE # 70
; {
			; SOURCE LINE # 71
;     unsigned char cnt = 0;
			; SOURCE LINE # 72
	CLR  	A
	MOV  	cnt?344,A
; 	unsigned char count = 700;
			; SOURCE LINE # 73
	MOV  	count?345,#0BCH
;     DS18B20_PIN = 0;
			; SOURCE LINE # 74
	CLR  	P1_0
; //    DS18B20_100US;
; //    DS18B20_100US;
; //    DS18B20_100US;
; //    DS18B20_100US;
; //    DS18B20_100US;
; //    DS18B20_100US;
; //    DS18B20_100US;
; 	delay_us(700);
			; SOURCE LINE # 82
	MOV  	R7,#0BCH
	MOV  	R6,#02H
	MOV  	R5,A
	MOV  	R4,A
	LCALL	_delay_us
;     DS18B20_50US;
			; SOURCE LINE # 83
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
;     DS18B20_PIN = 1;
			; SOURCE LINE # 84
	SETB 	P1_0
;     DS18B20_10US;
			; SOURCE LINE # 85
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
;     DS18B20_5US;      //等待DS18B20回应
			; SOURCE LINE # 86
	NOP  	
	NOP  	
	NOP  	
	NOP  	
	NOP  	
?C0012:
; 
;     while(DS18B20_PIN && cnt < 200)
			; SOURCE LINE # 88
	JNB  	P1_0,?C0013
	CLR  	C
	MOV  	A,cnt?344
	SUBB 	A,#0C8H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0013
;     {
			; SOURCE LINE # 89
; //		delay_us(1);
;         cnt++;
			; SOURCE LINE # 91
	INC  	cnt?344
;     }
			; SOURCE LINE # 92
	SJMP 	?C0012
?C0013:
; 
;     if(cnt >= 200) return 1;
			; SOURCE LINE # 94
	CLR  	C
	MOV  	A,cnt?344
	SUBB 	A,#0C8H
	MOV  	A,#080H
	SUBB 	A,#080H
	JC   	?C0014
	MOV  	R7,#01H
	RET  	
?C0014:
; 
;     cnt = 0;
			; SOURCE LINE # 96
	CLR  	A
	MOV  	cnt?344,A
?C0016:
; 
;     while(!DS18B20_PIN && cnt < 240)
			; SOURCE LINE # 98
	JB   	P1_0,?C0017
	CLR  	C
	MOV  	A,cnt?344
	SUBB 	A,#0F0H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0017
;     {
			; SOURCE LINE # 99
; //		delay_us(1);
;         cnt++;
			; SOURCE LINE # 101
	INC  	cnt?344
;     }
			; SOURCE LINE # 102
	SJMP 	?C0016
?C0017:
; 
;     if(cnt >= 240) return 1;
			; SOURCE LINE # 104
	CLR  	C
	MOV  	A,cnt?344
	SUBB 	A,#0F0H
	MOV  	A,#080H
	SUBB 	A,#080H
	JC   	?C0018
	MOV  	R7,#01H
	RET  	
?C0018:
; 
;     return 0;
			; SOURCE LINE # 106
	MOV  	R7,#00H
; }
			; SOURCE LINE # 107
?C0015:
	RET  	
; END OF ds18b20_read_status

; //开始转换 0：开启失败	1：开启成功
; unsigned char ds18b20_conversion_start(void)

	RSEG  ?PR?ds18b20_conversion_start?DS18B20
ds18b20_conversion_start:
	USING	0
			; SOURCE LINE # 109
; {
			; SOURCE LINE # 110
;     if(ds18b20_read_status())
			; SOURCE LINE # 111
	LCALL	ds18b20_read_status
	MOV  	A,R7
	JZ   	?C0019
;     {
			; SOURCE LINE # 112
;         return 0;
			; SOURCE LINE # 113
	MOV  	R7,#00H
	RET  	
;     }
			; SOURCE LINE # 114
?C0019:
; 
;     ds18b20_write_byte(0xCC); //跳过ROM序列检测
			; SOURCE LINE # 116
;     ds18b20_write_byte(0x44); //启动一次温度转换
			; SOURCE LINE # 117
	LCALL	L?0023
;     return 1;
			; SOURCE LINE # 118
	MOV  	R7,#01H
; }
			; SOURCE LINE # 119
?C0020:
	RET  	
; END OF ds18b20_conversion_start

; 
; //读取温度
; unsigned short ds18b20_read_temperature(void)

	RSEG  ?PR?ds18b20_read_temperature?DS18B20
ds18b20_read_temperature:
	USING	0
			; SOURCE LINE # 122
; {
			; SOURCE LINE # 123
;     unsigned char temp_H, temp_L, ret;
; 
;     ret = ds18b20_init();
			; SOURCE LINE # 126
	LCALL	ds18b20_init
	MOV  	ret?548,R7
; 
;     ds18b20_write_byte(0xCC); //跳过ROM序列检测
			; SOURCE LINE # 128
;     ds18b20_write_byte(0x44); //启动一次温度转换
			; SOURCE LINE # 129
	LCALL	L?0023
; 
;     if(ds18b20_read_status())
			; SOURCE LINE # 131
	LCALL	ds18b20_read_status
	MOV  	A,R7
	JZ   	?C0021
;     {
			; SOURCE LINE # 132
;         return 0;
			; SOURCE LINE # 133
	CLR  	A
	MOV  	R6,A
	MOV  	R7,A
	RET  	
;     }
			; SOURCE LINE # 134
?C0021:
; 
;     ds18b20_write_byte(0xCC); //跳过ROM序列检测
			; SOURCE LINE # 136
	MOV  	R7,#0CCH
	LCALL	_ds18b20_write_byte
;     ds18b20_write_byte(0xBE); //读取温度
			; SOURCE LINE # 137
	MOV  	R7,#0BEH
	LCALL	_ds18b20_write_byte
;     temp_L = ds18b20_read_byte(); //读取的温度低位数据
			; SOURCE LINE # 138
	LCALL	ds18b20_read_byte
;---- Variable 'temp_L?547' assigned to Register 'R5' ----
	MOV  	R5,AR7
;     temp_H = ds18b20_read_byte(); //读取的温度高位数据
			; SOURCE LINE # 139
	LCALL	ds18b20_read_byte
;---- Variable 'temp_H?546' assigned to Register 'R7' ----
;     return temp_L | (temp_H << 8); //合成温度
			; SOURCE LINE # 140
	MOV  	A,R7
	MOV  	R6,A
	MOV  	A,R5
	MOV  	R7,A
; }
			; SOURCE LINE # 141
?C0022:
	RET  	
; END OF ds18b20_read_temperature

	END
